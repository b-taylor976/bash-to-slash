#!/bin/bash
#Bash-to-slash commandline interface function library 

# Initializes the arrays that hold the game's directory path, along with players' initial and final choices for piece placement.
initarrs() {
  correctdirs=( "$HOME/Desktop/testdir/test1/test1" "$HOME/Desktop/testdir/test2/test2" "$HOME/Desktop/testdir/test3/test3" "$HOME/Desktop/testdir/test4/test4" "$HOME/Desktop/testdir/test5/test5" "$HOME/Desktop/testdir/test6/test6" "$HOME/Desktop/testdir/test7/test7" "$HOME/Desktop/testdir/test8/test8" "$HOME/Desktop/testdir/test9/test9" "$HOME/Desktop/testdir/test10/test10" "$HOME/Desktop/testdir/test11/test11" "$HOME/Desktop/testdir/test12/test12" ) 
  declare -A selectedpiecestemp
  declare -A placedpieces
}

#List the designated directories.
listdirs() {
  for i in "${correctdirs[@]}"; do
    printf "%s\n" $i
  done
}

# Stores & places player's selected hidingplace.
selectpiece() {
  hidingplace="${1}"
  placepiecetemp
}

# Places player's selection in temporary array.
placepiecetemp() {
  selectioncorrect
  alreadyselected
  if [[ $correct = y ]] && [[ $selected = n ]]; then
    printf "Piece queued for placement: %s.\n" $hidingplace
    #printf "" > "${hidingplace}"
    addselecttemp
    clearvars
  elif [[ $correct = n ]]; then
    printf "Invalid location or filname: %s\nPlease select another.\n" $hidingplace
    clearvars
  else
    printf "Location already selected: %s\nPlease select another.\n" "$hidingplace"
    clearvars
  fi
}

# Once piece locations have been selected, and player is satisfied w/ their locations, place them accordingly.
placepieces() {
  for i in "${selectedpiecestemp[@]}"; do
    printf "" > "$i"
  done
  temptofinal
}

# Place items from selectedpiecestemp into placedpieces array.
temptofinal() {
  for i in "${selectedpiecestemp[@]}"; do
    placedpieces+=("$i")
  done
}

# Removes all placed pieces from their actual locations in the filesystem, and unsets the placedpieces array. 
rmall() {
  printf "The following pieces have been removed: \n"
  for i in "${selectedpiecestemp[@]}"; do
    rm "$i"
    printf "%s\n" "$i"
  done
  unset placedpieces
}

# Adds player's selection to the selectedpiecestemp array.
addselecttemp() {
  selectedpiecestemp+=("$hidingplace")
}

# Prints player's pieces that are aleady selected in key-value pairs. So if players wish to remove and replace pieces in different locations, they will know which to select.
listselect() {
  for i in "${!selectedpiecestemp[@]}"; do
    printf "%s\t${selectedpiecestemp[$i]}\n" "$i"
  done
}

listplaced() {
  for i in "${placedpieces[@]}"; do
    printf "%s\n" "$i"
  done
}

# For making adjustments to piece locations prior to final placement. Remove any number of pieces from selectpiecestemp array by specifying command line arguments. For example, rmselect 0 1 4 removes pieces at those locations in the array.
rmselect() {
  while [ $# -gt 0 ]; do
    unset selectedpiecestemp["${1}"]
    shift
  done
  selectedpiecestemp=("${selectedpiecestemp[@]}")
}

# Generic test function to be called when needed in more specific testing functions
isin() {
  local pattern="${1}" element
  shift
  for element; do
    [[ $element = $pattern ]] && return 0
  done
  return 1
}

# Specific test function for testing correct filename and location.
selectioncorrect() {
  if isin "$hidingplace" "${correctdirs[@]}"; then
    correct=y
  else
    correct=n
  fi
}

# Specific test function for testing if location is already selected.
alreadyselected() {
  if isin "$hidingplace" "${selectedpiecestemp[@]}"; then
    selected=y
    #printf "Location already selected: %s.\nPleases select another.\n" "$hidingplace"
  else
    selected=n
  fi
}

# For running once pieces are correctly selected and placed (just in case).
clearvars() {
  unset hidingplace
  unset correct
  unset selected
}

# Create the directories.
initarrs
